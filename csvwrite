#!/usr/bin/env node
var es=require('event-stream')
var args=process.argv.slice(2).join(' ').split(/(,|\b)/).map(arg=>arg.replaceAll(/^\"|\"$/g, ""));

//if(!args.length)
	//args=[1,2,3,4,5,6,7,8,9,9,10]

var csv;
var createCsvStringifier = require('csv-writer').createObjectCsvStringifier;
var headersSent=false;

/*
if(opts.header) {
	var csvStringifier = createCsvStringifier(opts);
	process.stdout.write(csvStringifier.getHeaderString());
} else {
	var createCsvStringifier = require('csv-writer').createArrayCsvStringifier;
	var csvStringifier = createCsvStringifier(opts);
}
*/
//process.stdout.write("\n");
var head="";

process.openStdin()
	.pipe(es.split())
	.pipe(es.map(function (data,cb) {
			if(data) {
				var parsed=JSON.parse(data)
				if(typeof (parsed) == "object") {
				
					if(!headersSent) {
						/*
						var opts = args.length 
							? ({ header: args.map(arg=>({ id: arg, title: arg })) }) 
							: ({ header: Object.keys(parsed).map(arg=>({ id: arg, title: arg })) })
						/* */
						var opts = { header: Object.keys(args).map(arg=>({ id: arg, title: arg })) };
						csv = createCsvStringifier(opts);
						head=csv.getHeaderString();
						headersSent=true;				
					} else {
            head=""
          }
          				
					var csvString=head+csv.stringifyRecords([parsed]);
					cb(null, csvString);
					
				} else {
					cb(null)
				}
				
			} else {
				return cb(null)
			}
	}))
	.pipe(process.stdout)

